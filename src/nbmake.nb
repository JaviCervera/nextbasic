$Option Console

Const USAGE_ERROR = -1
Const FILENAME_ERROR = -2
Const COMPILER_ERROR = -3
Const OPTIONS_ERROR = -4

Program
	'Check command line
	If CountArray(CommandLine()) <> 1
		Print("Usage: " + ProgramName() + " sourcefile")
		Return USAGE_ERROR
	EndIf
	
	'Get filename
	Dim sourceFilename$ = RealPath(ArrayString(CommandLine(), 0))
	Dim cppFilename$ = StripExt(sourceFilename) + ".cpp"
	If Lower(ExtractExt(sourceFilename)) <> "nb" And Lower(ExtractExt(sourceFilename)) <> "cpp"
		Print("Error: Source file must be a .nb or .cpp file")
		Return FILENAME_ERROR
	EndIf
	
	'Ensure that we are running from bin folder
	ChangeDir(ExtractDir(ProgramName()))
	
	'Compile if a .nb file
	Dim nbSource = False
	Dim compilerCode = 0
	If Lower(ExtractExt(sourceFilename)) = "nb"
		nbSource = True
		Dim cmd$ = "nbc " + Chr(34) + sourceFilename + Chr(34)
		If PlatformId() <> PLATFORM_WINDOWS : cmd = "./" + cmd : EndIf
		compilerCode = System(cmd)
		If compilerCode <> 0 : Return COMPILER_ERROR : EndIf
	EndIf
	
	'Read options from .cpp file
	Dim source$ = Replace(Replace(LoadString(cppFilename), "\r\n", "\n"), "\r", "\n")
	Dim find1 = Find(source, "\n", 1)
	Dim find2 = Find(source, "\n", find1+1)
	Dim find3 = Find(source, "\n", find2+1)
	Dim modules$ = Left(source, find1 - 1)
	Dim libs$ = Mid(source, find1+1, find2 - find1 - 1)
	Dim options$ = Mid(source, find2+1, find3 - find2 - 1)
	If Left(modules, 11) <> "//$modules:" Or Left(libs, 8) <> "//$libs:" Or Left(options, 11) <> "//$options:"
		Print("Error: C++ source file has not been generated by nbc")
		Return OPTIONS_ERROR
	EndIf
	
	'Parse options
	Dim isGuiApp = False
	Dim optionsArr = SplitString(Right(options, Len(options) - 11), ",")
	For Dim i = 0 To CountArray(optionsArr) - 1
		Select Lower(ArrayString(optionsArr, i))
		Case "console"
			isGuiApp = False
		Case "gui"
			isGuiApp = True
		EndSelect
	Next
	FreeArray(optionsArr)
	
	'Build executable
	Dim modulesArr = SplitString(Right(modules, Len(modules) - 11), ",")
	Dim libsArr = SplitString(Right(libs, Len(libs) - 8), ",")
	compilerCode = System(GetCommandLine(cppFilename, modulesArr, libsArr, isGuiApp))
	FreeArray(modulesArr)
	FreeArray(libsArr)
	
	'Delete .cpp file if it was built by nbmake
	If nbSource
		DeleteFile(cppFilename)
	EndIf
	
	'Create Mac bundle if needed
	If PlatformId() = PLATFORM_MAC And isGuiApp And compilerCode = 0
		Print("Generating application bundle...")
		
		Dim bundleName$ = StripExt(cppFilename) + ".app"
		
		'Create app bundle and subdirs
        CreateDir(bundleName)
        CreateDir(bundleName + "/Contents")
        CreateDir(bundleName + "/Contents/MacOS")
        CreateDir(bundleName + "/Contents/Resources")
		
        'Copy binary file
        System("mv " + Chr(34) + StripExt(cppFilename) + Chr(34) + " " + Chr(34) + bundleName + "/Contents/MacOS" + Chr(34))

        'Copy .icns file
		System("cp default.icns " + Chr(34) + bundleName + "/Contents/Resources/" + StripDir(StripExt(cppFilename)) + ".icns" + Chr(34))

        'Create Info.plist
        Dim plist$ = "<?xml version=" + Chr(34) + "1.0" + Chr(34) + " encoding=" + Chr(34) + "UTF-8" + Chr(34) + "?>\n"
        plist = plist + "<!DOCTYPE plist PUBLIC " + Chr(34) + "-//Apple Computer//DTD PLIST 1.0//EN" + Chr(34) + " " + Chr(34) + "http://www.apple.com/DTDs/PropertyList-1.0.dtd" + Chr(34) + ">\n"
        plist = plist + "<plist version=" + Chr(34) + "1.0" + Chr(34) + ">\n"
        plist = plist + "<dict>\n"
        plist = plist + "\t<key>CFBundleExecutable</key>\n"
        plist = plist + "\t<string>" + StripDir(StripExt(cppFilename)) + "</string>\n"
        plist = plist + "\t<key>CFBundleIconFile</key>\n"
        plist = plist + "\t<string>" + StripDir(StripExt(cppFilename)) + "</string>\n"
        plist = plist + "\t<key>CFBundlePackageType</key>\n"
        plist = plist + "\t<string>APPL</string>\n"
        plist = plist + "</dict>\n"
        plist = plist + "</plist>\n"
		SaveString(plist, bundleName + "/Contents/Info.plist", false)
	EndIf
EndProgram

Function GetCommandLine$(cppfilename$, modulesArr, libsArr, isGuiApp)
	'Get platform name
	Dim platform$ = ""
	Select PlatformId()
	Case PLATFORM_WINDOWS
		platform = ".win32"
	Case PLATFORM_MAC
		platform = ".mac"
	Case PLATFORM_LINUX
		platform = ".linux"
	EndSelect

	'Get binary filename
	Dim binfilename$ = StripExt(cppfilename)
	If PlatformId() = PLATFORM_WINDOWS
		binfilename = binfilename + ".exe"
	EndIf
	
	'Get command line
	Dim cmd$ = "g++ -w -O3 -m32 "
	If PlatformId() = PLATFORM_MAC : cmd = cmd + "-stdlib=libstdc++ " : EndIf
	cmd = cmd + "-o " + Chr(34) + binfilename + Chr(34) + " " + Chr(34) + cppfilename + Chr(34)
	
	'Add module paths
	cmd = cmd + " -L. -L" + Chr(34) + ExtractDir(cppfilename) + Chr(34)
	For Dim i = 0 To CountArray(modulesArr) - 1
		cmd = cmd + " -L../modules/" + ArrayString(modulesArr, i)
	Next
	
	'Link modules
	Dim linkOpenGL = False
	Dim linkSDL2 = False
	Dim linkWX = False
	For i = 0 To CountArray(libsArr) - 1
		Select ArrayString(libsArr, i)
		'OpenGL
		Case "opengl"
			linkOpenGL = True
		'SDL2
		Case "sdl2"
			linkSDL2 = True
		'wxWidgets
		Case "wxwidgets"
			linkWX = True
		'Other
		Default
			cmd = cmd + " -l" + ArrayString(libsArr, i) + platform
		EndSelect
	Next
	Select PlatformId()
	Case PLATFORM_WINDOWS
		If linkOpenGL : cmd = cmd + " -lopengl32" : EndIf
		If linkWX : cmd = cmd + " -lwx_mswu-3.0.win32 -lwxregexu-3.0.win32 -lwxexpat-3.0.win32 -lwxtiff-3.0.win32 -lwxjpeg-3.0.win32 -lwxpng-3.0.win32 -lwxzlib-3.0.win32 -lrpcrt4 -loleaut32 -lole32 -luuid -lwinspool -lshell32 -lcomctl32 -lcomdlg32 -ladvapi32 -lwsock32" : EndIf
		cmd = cmd + " -lgdi32 -lwinmm"
		If isGuiApp : cmd = cmd + " -mwindows" : EndIf
	Case PLATFORM_MAC
		If linkOpenGL : cmd = cmd + " -framework IOKit -framework QuartzCore -framework OpenGL" : EndIf
		If linkSDL2 : cmd = cmd + " -lsdl2.mac -liconv -framework AudioUnit -framework Carbon -framework CoreAudio -framework ForceFeedback -framework IOKit" : EndIf
		If linkWX : cmd = cmd + " -framework IOKit -framework Carbon -framework Cocoa -framework AudioToolbox -framework System -framework OpenGL -framework QuickTime -lwx_osx_cocoau-3.0.mac -framework WebKit -lwxregexu-3.0.mac -lwxexpat-3.0.mac -lwxtiff-3.0.mac -lwxjpeg-3.0.mac -lwxpng-3.0.mac -lz -lpthread -liconv -llzma" : EndIf
		cmd = cmd + " -framework AppKit"
	Case PLATFORM_LINUX
		If linkOpenGL : cmd = cmd + " -lGL -lX11 -lXxf86vm -lXrandr -lXi" : EndIf
		cmd = cmd + " -ldl -lm -lpthread"
	EndSelect
	
	Return cmd
EndFunction
